/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EventManager as PrismaEventManager,
  City as PrismaCity,
} from "@prisma/client";

export class EventManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventManager.count(args);
  }

  async eventManagers(
    args: Prisma.EventManagerFindManyArgs
  ): Promise<PrismaEventManager[]> {
    return this.prisma.eventManager.findMany(args);
  }
  async eventManager(
    args: Prisma.EventManagerFindUniqueArgs
  ): Promise<PrismaEventManager | null> {
    return this.prisma.eventManager.findUnique(args);
  }
  async createEventManager(
    args: Prisma.EventManagerCreateArgs
  ): Promise<PrismaEventManager> {
    return this.prisma.eventManager.create(args);
  }
  async updateEventManager(
    args: Prisma.EventManagerUpdateArgs
  ): Promise<PrismaEventManager> {
    return this.prisma.eventManager.update(args);
  }
  async deleteEventManager(
    args: Prisma.EventManagerDeleteArgs
  ): Promise<PrismaEventManager> {
    return this.prisma.eventManager.delete(args);
  }

  async getCity(parentId: string): Promise<PrismaCity | null> {
    return this.prisma.eventManager
      .findUnique({
        where: { id: parentId },
      })
      .city();
  }
}
