/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EventManager } from "./EventManager";
import { EventManagerCountArgs } from "./EventManagerCountArgs";
import { EventManagerFindManyArgs } from "./EventManagerFindManyArgs";
import { EventManagerFindUniqueArgs } from "./EventManagerFindUniqueArgs";
import { CreateEventManagerArgs } from "./CreateEventManagerArgs";
import { UpdateEventManagerArgs } from "./UpdateEventManagerArgs";
import { DeleteEventManagerArgs } from "./DeleteEventManagerArgs";
import { City } from "../../city/base/City";
import { EventManagerService } from "../eventManager.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EventManager)
export class EventManagerResolverBase {
  constructor(
    protected readonly service: EventManagerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "read",
    possession: "any",
  })
  async _eventManagersMeta(
    @graphql.Args() args: EventManagerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EventManager])
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "read",
    possession: "any",
  })
  async eventManagers(
    @graphql.Args() args: EventManagerFindManyArgs
  ): Promise<EventManager[]> {
    return this.service.eventManagers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EventManager, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "read",
    possession: "own",
  })
  async eventManager(
    @graphql.Args() args: EventManagerFindUniqueArgs
  ): Promise<EventManager | null> {
    const result = await this.service.eventManager(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventManager)
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "create",
    possession: "any",
  })
  async createEventManager(
    @graphql.Args() args: CreateEventManagerArgs
  ): Promise<EventManager> {
    return await this.service.createEventManager({
      ...args,
      data: {
        ...args.data,

        city: args.data.city
          ? {
              connect: args.data.city,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventManager)
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "update",
    possession: "any",
  })
  async updateEventManager(
    @graphql.Args() args: UpdateEventManagerArgs
  ): Promise<EventManager | null> {
    try {
      return await this.service.updateEventManager({
        ...args,
        data: {
          ...args.data,

          city: args.data.city
            ? {
                connect: args.data.city,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventManager)
  @nestAccessControl.UseRoles({
    resource: "EventManager",
    action: "delete",
    possession: "any",
  })
  async deleteEventManager(
    @graphql.Args() args: DeleteEventManagerArgs
  ): Promise<EventManager | null> {
    try {
      return await this.service.deleteEventManager(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => City, {
    nullable: true,
    name: "city",
  })
  @nestAccessControl.UseRoles({
    resource: "City",
    action: "read",
    possession: "any",
  })
  async getCity(@graphql.Parent() parent: EventManager): Promise<City | null> {
    const result = await this.service.getCity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
